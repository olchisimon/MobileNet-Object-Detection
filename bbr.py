import torch
import numpy as np

from .annotation import AnnotationRect


def get_bbr_loss(
    anchor_boxes: torch.Tensor,
    adjustments: torch.Tensor,
    groundtruths: torch.Tensor,
):
    """
    @param anchor_boxes: Batch of box coordinates from the anchor grid
    @param adjustments: Batch of adjustments of the prediction (#data, 4)
    @param groundtruths: Batch of ground truth data given as (x1, y1, x2, y2) (#data, 4)
    """
    # debugging
    assert(anchor_boxes.shape == adjustments.shape == groundtruths.shape)

    # calcuate loss offset x, y
    output_x = adjustments[:, 0]
    output_y = adjustments[:, 1]

    offset_x = (groundtruths[:, 0] - anchor_boxes[:, 0]) / (anchor_boxes[:, 2] - anchor_boxes[:, 0] + 1e-6)
    offset_y = (groundtruths[:, 1] - anchor_boxes[:, 1]) / (anchor_boxes[:, 3] - anchor_boxes[:, 1] + 1e-6)

    # calculate loss scale width, height
    output_width = adjustments[:, 2]
    output_height = adjustments[:, 3]

    gt_width = groundtruths[:, 2] - groundtruths[:, 0]
    gt_height = groundtruths[:, 3] - groundtruths[:, 1]
    anchor_width = anchor_boxes[:, 2] - anchor_boxes[:, 0]
    anchor_height = anchor_boxes[:, 3] - anchor_boxes[:, 1]

    scale_width = torch.log(gt_width / (anchor_width + 1e-6))
    scale_height = torch.log(gt_height / (anchor_height + 1e-6))

    # losses
    loss_x = (output_x - offset_x) ** 2
    loss_y = (output_y - offset_y) ** 2
    loss_scale_width = (output_width - scale_width) ** 2
    loss_scale_height = (output_height - scale_height) ** 2

    return (loss_x + loss_y + loss_scale_width + loss_scale_height).mean()


def apply_bbr(anchor_box: torch.tensor, adjustment: torch.Tensor) -> AnnotationRect:
    """Calculates an AnnotationRect based on a given anchor box and adjustments

    @param anchor_box: Single box coordinates from the anchor grid
    @param adjustment: Adjustments, generated by the model
    """
    # numpy input
    """
    x1_anchor, y1_anchor, x2_anchor, y2_anchor = anchor_box

    if adjustment.is_cuda:
        adjustment = adjustment.cpu()
    adjustment = adjustment.numpy()

    offset_x, offset_y, scale_width, scale_height = adjustment

    x1 = x1_anchor + offset_x * (x2_anchor - x1_anchor)
    y1 = y1_anchor + offset_y * (y2_anchor - y1_anchor)
    x2 = x1 + np.exp(scale_width) * (x2_anchor - x1_anchor)
    y2 = y1 + np.exp(scale_height) * (y2_anchor - y1_anchor)

    return AnnotationRect(x1, y1, x2, y2)
    """
    # tensor input

    x1_anchor, y1_anchor, x2_anchor, y2_anchor = anchor_box

    offset_x, offset_y, scale_width, scale_height = adjustment

    x1 = x1_anchor + offset_x * (x2_anchor - x1_anchor)
    y1 = y1_anchor + offset_y * (y2_anchor - y1_anchor)
    x2 = x1 + torch.exp(scale_width) * (x2_anchor - x1_anchor)
    y2 = y1 + torch.exp(scale_height) * (y2_anchor - y1_anchor)

    return AnnotationRect(float(x1), float(y1), float(x2), float(y2))
